pipeline {
    agent any

    environment {
        // You can add env variables here if needed
        GOPATH = "${env.WORKSPACE}/.gopath"
        GOCACHE = "${env.WORKSPACE}/.gocache"
    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Unit Tests - Backend') {
            steps {
                dir('bugtracker-backend') {
                    script {
                        echo "Running Go tests inside Docker container..."
                        docker.image('golang:1.21').inside('-u 0:0') {
                            sh '''
                                go mod tidy
                                go test -v ./...
                                go test -coverprofile=coverage.out -covermode=atomic ./...
                                go tool cover -html=coverage.out -o coverage.html
                            '''
                        }
                    }
                }
            }
            post {
                always {
                    publishHTML(target: [
                        reportName: 'Backend Coverage Report',
                        reportDir: 'bugtracker-backend',
                        reportFiles: 'coverage.html',
                        allowMissing: true,
                        alwaysLinkToLastBuild: true
                    ])
                    echo "Backend tests finished."
                }
            }
        }

        stage('Unit Tests - Frontend') {
            steps {
                dir('bugtracker-frontend') {
                    echo "Run your frontend tests here (if any)"
                    // Add npm/React test commands if needed
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
    }
}
