pipeline {
    agent any

    stages {
        stage('Unit Tests - Backend') {
            agent {
                docker {
                    image 'snakee/golang-junit:1.21'
                    reuseNode true
                }
            }
            environment {
                GOCACHE = "${WORKSPACE}/.gocache"
                GOPATH  = "${WORKSPACE}/.gopath"
            }
            steps {
                dir('bugtracker-backend') {
                    echo "Running Go tests..."
                    sh '''
                        mkdir -p $GOCACHE
                        mkdir -p $GOPATH
                        go test -v ./...
                        go test -coverprofile=coverage.out -covermode=atomic ./...
                        go tool cover -html=coverage.out -o coverage.html
                    '''
                }
            }
            post {
                always {
                    echo "Backend tests finished."
                    publishHTML(target: [
                        reportDir: 'bugtracker-backend',
                        reportFiles: 'coverage.html',
                        reportName: 'Backend Coverage Report'
                    ])
                }
            }
        }

        stage('Unit Tests - Frontend') {
            agent {
                docker {
                    image 'node:20-alpine'
                    reuseNode true
                }
            }
            steps {
                dir('bugtracker-frontend') {
                    echo "Running frontend tests..."
                    sh '''
                        npm ci
                        npm test
                    '''
                }
            }
            post {
                always {
                    junit 'bugtracker-frontend/test-results.xml'
                    echo "Frontend tests finished."
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check the logs above."
        }
    }
}
