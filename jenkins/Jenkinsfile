pipeline {
    agent any

    environment {
        GOPATH = "${env.WORKSPACE}/.gopath"
        GOCACHE = "${env.WORKSPACE}/.gocache"
    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Unit Tests - Backend') {
            steps {
                dir('bugtracker-backend') {
                    script {
                        echo "Running Go tests inside Docker container..."
                        docker.image('golang:1.21').inside('-u 0:0') {
                            sh '''
                                go install github.com/jstemmer/go-junit-report@latest
                                export PATH=$PATH:$(go env GOPATH)/bin
                                go mod tidy
                                go test -v ./... | tee go-test.out | go-junit-report > report.xml
                                go test -coverprofile=coverage.out -covermode=atomic ./...
                                go tool cover -html=coverage.out -o coverage.html
                            '''
                        }
                    }
                }
            }
            post {
                always {
                    junit 'bugtracker-backend/report.xml'
                    publishHTML(target: [
                        reportName: 'Backend Coverage Report',
                        reportDir: 'bugtracker-backend',
                        reportFiles: 'coverage.html',
                        allowMissing: true,
                        alwaysLinkToLastBuild: true
                    ])
                    echo "Backend tests finished."
                }
            }
        }

        stage('Unit Tests - Frontend') {
            steps {
                dir('bugtracker-frontend') {
                    script {
                        docker.image('node:18').inside {
                            sh '''
                                npm ci
                                npm test -- --ci --reporters=default --reporters=jest-junit
                            '''
                        }
                    }
                }
                junit 'bugtracker-frontend/junit.xml'
            }
            post {
                always {
                    publishHTML(target: [
                        reportName: 'Frontend Coverage Report',
                        reportDir: 'bugtracker-frontend/coverage',
                        reportFiles: 'index.html',
                        allowMissing: true,
                        alwaysLinkToLastBuild: true
                    ])
                    echo "Frontend tests finished."
                }
            }
        }
    }
}