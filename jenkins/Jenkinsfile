pipeline {
    agent any

    environment {
        GOCACHE = "${WORKSPACE}/.gocache"
        GOPATH  = "${WORKSPACE}/.gopath"
    }

    stages {
        stage('Unit Tests - Backend') {
            steps {
                dir('bugtracker-backend') {
                    sh '''
                        echo "Running Go tests in Docker container..."
                        mkdir -p $GOCACHE
                        mkdir -p $GOPATH

                        # Run Go tests using official golang Docker image
                        docker run --rm -v $PWD:/app -w /app golang:1.21 \
                            sh -c "go mod tidy && go test -v ./... && go test -coverprofile=coverage.out -covermode=atomic ./... && go tool cover -html=coverage.out -o coverage.html"
                    '''
                }
            }
            post {
                always {
                    echo "Backend tests finished."
                    publishHTML(target: [
                        reportDir: 'bugtracker-backend',
                        reportFiles: 'coverage.html',
                        reportName: 'Backend Coverage Report'
                    ])
                }
            }
        }

        stage('Unit Tests - Frontend') {
            steps {
                dir('bugtracker-frontend') {
                    sh '''
                        echo "Running Frontend tests in Docker container..."
                        docker run --rm -v $PWD:/app -w /app node:20-alpine \
                            sh -c "npm ci && npm test"
                    '''
                }
            }
            post {
                always {
                    junit 'bugtracker-frontend/test-results.xml'
                    echo "Frontend tests finished."
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check the logs above."
        }
    }
}
